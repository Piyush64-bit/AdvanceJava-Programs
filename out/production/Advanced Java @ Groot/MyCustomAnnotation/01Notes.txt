# üéØ Custom Annotations in Java - Complete Guide

## üìñ What Are We Building?
This project demonstrates the power of **Custom Annotations** in Java! We're creating our own annotation called `@Info` and using Java Reflection API to read annotation data at runtime. It's like giving your code superpowers! ü¶∏‚Äç‚ôÇÔ∏è

---

## üèóÔ∏è Project Structure

### 1. üìÑ Info.java - Our Custom Annotation
- **Purpose**: Defines a custom annotation called `@Info`
- **Elements**: 
  - `author` (required) - Who wrote this code?
  - `description` (optional) - What does this code do?
- **Key Features**:
  - `@Retention(RetentionPolicy.RUNTIME)` - Makes annotation available at runtime for reflection
  - `@Target({ElementType.METHOD, ElementType.FIELD})` - Can be applied to methods and fields
  - Default value for description: "No description provided"

### 2. üé≠ MyClass.java - Annotation Usage Demo
- **Purpose**: Shows how to use our custom `@Info` annotation
- **Demonstrations**:
  - Method `myMethod()` - Uses BOTH author AND description
  - Method `sayHello()` - Uses ONLY author (description will use default value)
  - Perfect example of required vs optional parameters!

### 3. üîç AnnotationReader.java - The Magic Happens Here!
- **Purpose**: Uses Java Reflection API to read annotation data at runtime
- **Process**:
  1. Gets the class using `MyClass.class`
  2. Iterates through all declared fields
  3. Iterates through all declared methods
  4. Checks if `@Info` annotation is present
  5. Extracts and displays annotation values
- **Output**: Displays author and description for each annotated element

---

## üöÄ How It Works (Step-by-Step)

### Step 1: Creating the Annotation (@Info)
```java
@Retention(RetentionPolicy.RUNTIME)  // Available at runtime
@Target({ElementType.METHOD, ElementType.FIELD})  // For methods & fields
public @interface Info {
    String author();                              // Required parameter
    String description() default "No description provided";  // Optional with default
}
```

### Step 2: Using the Annotation
```java
@Info(author = "Groot", description = "This is a sample method")
public void myMethod() { ... }

@Info(author = "Groot")  // No description = uses default
public void sayHello() { ... }
```

### Step 3: Reading Annotations at Runtime
```java
Class<?> cls = MyClass.class;
for (Method method : cls.getDeclaredMethods()) {
    if (method.isAnnotationPresent(Info.class)) {
        Info info = method.getAnnotation(Info.class);
        // Extract author and description
    }
}
```

---

## üéØ Key Learning Points

### üî• Meta-Annotations Used:
- **@Retention(RetentionPolicy.RUNTIME)**: 
  - Makes annotation available during program execution
  - Essential for reflection to work!
  - Other options: SOURCE (compile-time only), CLASS (bytecode only)

- **@Target({ElementType.METHOD, ElementType.FIELD})**:
  - Restricts where annotation can be used
  - METHOD = can annotate methods
  - FIELD = can annotate class variables
  - Other options: TYPE, CONSTRUCTOR, PARAMETER, etc.

### üí° Annotation Elements:
- **Required Parameter**: `String author();` - Must be provided when using annotation
- **Optional Parameter**: `String description() default "...";` - Has default value
- **Data Types**: Annotations can have primitives, Strings, enums, arrays, and other annotations

### üîç Java Reflection Magic:
- **Class.forName()** or **ClassName.class** - Gets class metadata
- **getDeclaredMethods()** - Gets all methods (public, private, protected)
- **getDeclaredFields()** - Gets all fields
- **isAnnotationPresent()** - Checks if annotation exists
- **getAnnotation()** - Retrieves annotation instance

---

## üèÉ‚Äç‚ôÇÔ∏è Expected Output

When you run `AnnotationReader.java`, you should see:

```
Method: myMethod
Author: Groot
Description: This is a sample method

Method: sayHello
Author: Groot
Description: No description provided
```

---

## ü§î Why Use Custom Annotations?

### Real-World Applications:
1. **Framework Development** (Spring, Hibernate)
2. **Code Documentation** (Better than comments!)
3. **Validation Rules** (@NotNull, @Email)
4. **Security Annotations** (@Secured, @RolesAllowed)
5. **Testing Annotations** (@Test, @BeforeEach)
6. **Performance Monitoring** (@Timed, @Cacheable)

### Benefits:
- ‚úÖ **Self-Documenting Code** - Annotations explain what code does
- ‚úÖ **Framework Integration** - Frameworks can read your annotations
- ‚úÖ **Compile-Time Safety** - Catch errors early
- ‚úÖ **Runtime Flexibility** - Modify behavior without changing logic
- ‚úÖ **Clean Code** - Separate concerns elegantly

---

## üõ†Ô∏è How to Run

1. **Compile all files**:
   ```bash
   javac *.java
   ```

2. **Run the annotation reader**:
   ```bash
   java AnnotationReader
   ```

3. **Watch the magic happen!** ‚ú®

---

## üß† Pro Tips & Best Practices

### üéØ Naming Conventions:
- Use descriptive names: `@Info`, `@Validate`, `@Cache`
- Follow CamelCase: `@DatabaseTable`, `@JsonProperty`

### üîß Design Tips:
- Keep annotations simple and focused
- Use meaningful default values
- Document your annotations well
- Consider retention policy carefully

### ‚ö° Performance Notes:
- Reflection is slower than direct method calls
- Cache annotation data when possible
- Use annotations for configuration, not core logic

---

## üö® Common Pitfalls to Avoid

1. **Wrong Retention Policy**: Use RUNTIME for reflection
2. **Missing @Target**: Specify where annotation can be used
3. **Complex Logic in Annotations**: Keep them simple!
4. **Overusing Reflection**: Use sparingly for performance
5. **Forgetting Default Values**: Provide sensible defaults

---

## üéâ What's Next?

Ready to level up? Try these challenges:

1. **Add More Elements**: Create `version`, `date`, `priority` fields
2. **Array Parameters**: Support multiple authors: `String[] authors()`
3. **Enum Support**: Add priority levels: `Priority priority() default Priority.MEDIUM`
4. **Class-Level Annotations**: Annotate entire classes
5. **Custom Validation**: Create `@EmailValidator`, `@RangeValidator`

---

## üåü Conclusion

Custom annotations are like **superpowers for your code**! They let you:
- Add metadata without changing logic
- Create cleaner, self-documenting code
- Build powerful frameworks and tools
- Integrate with existing Java ecosystem

Master annotations, and you'll write code that's not just functional, but **elegant and expressive**! üöÄ

---

*Happy Coding! May your annotations be meaningful and your reflection be swift! ‚ö°*